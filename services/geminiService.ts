import { GoogleGenAI, Modality, GenerateContentResponse } from "@google/genai";
import { ImageFile } from '../types';

if (!process.env.API_KEY) {
  throw new Error("API_KEY environment variable not set");
}

const ai = new GoogleGenAI({ apiKey: process.env.API_KEY });

const fileToBase64 = (file: File): Promise<string> =>
  new Promise((resolve, reject) => {
    const reader = new FileReader();
    reader.readAsDataURL(file);
    reader.onload = () => {
        const result = reader.result as string;
        // remove data:mime/type;base64, prefix
        resolve(result.split(',')[1]);
    }
    reader.onerror = (error) => reject(error);
  });

export const getBase64FromFile = async (file: File): Promise<ImageFile> => {
    const base64 = await fileToBase64(file);
    return {
        file,
        base64,
        mimeType: file.type
    };
}

export const generatePromptFromImages = async (characterImage: ImageFile, styleImage: ImageFile): Promise<string> => {
  try {
    const characterPart = {
      inlineData: {
        mimeType: characterImage.mimeType,
        data: characterImage.base64,
      },
    };
    const stylePart = {
      inlineData: {
        mimeType: styleImage.mimeType,
        data: styleImage.base64,
      },
    };
    const textPart = {
      text: `Analyze the character in the first image (facial features, hair, expression) and the artistic style of the second image (color, lighting, mood, etc.).
Generate a detailed, single-paragraph descriptive prompt for an image generation model.
The prompt must start with "a portrait of..." followed by a description of the character from the first image.
Then, incorporate the following elements inspired by the artistic style of the second image:
- Style (e.g., photorealistic, anime, watercolor)
- Lighting (e.g., dramatic, soft, neon)
- Composition (e.g., close-up, centered)
- Details (e.g., fine textures, specific brush strokes)
Finally, the prompt must end with the exact phrase: ", High Detail, 8K, Professional Studio Shot, Masterpiece."
Do not use markdown or list formatting. The entire output should be a single text block.
Do not mention the images themselves in the final prompt.`
    };
    
    const response: GenerateContentResponse = await ai.models.generateContent({
      model: 'gemini-2.5-flash',
      contents: { parts: [characterPart, stylePart, textPart] },
    });

    return response.text;
  } catch (error) {
    console.error("Error generating prompt:", error);
    throw new Error("Failed to generate prompt from images.");
  }
};

export const editImageWithPrompt = async (baseImage: ImageFile, prompt: string): Promise<string> => {
  try {
    const response: GenerateContentResponse = await ai.models.generateContent({
      model: 'gemini-2.5-flash-image-preview',
      contents: {
        parts: [
          {
            inlineData: {
              data: baseImage.base64,
              mimeType: baseImage.mimeType,
            },
          },
          {
            text: prompt,
          },
        ],
      },
      config: {
        responseModalities: [Modality.IMAGE, Modality.TEXT],
      },
    });

    for (const part of response.candidates[0].content.parts) {
      if (part.inlineData) {
        const base64ImageBytes: string = part.inlineData.data;
        return `data:${part.inlineData.mimeType};base64,${base64ImageBytes}`;
      }
    }
    throw new Error("No image was generated by the model.");
  } catch (error) {
    console.error("Error editing image:", error);
    throw new Error("Failed to design a new image.");
  }
};